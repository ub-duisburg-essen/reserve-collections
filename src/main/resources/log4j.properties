# Default to info level output; this is very handy if you eventually use Hibernate as well.
# Root logger option
log4j.rootLogger=INFO, file, stdout

# Direct log messages to a log file
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.File=${catalina.base}/logs/catalina.log
log4j.appender.file.encoding=UTF-8
log4j.appender.file.MaxFileSize=20MB
log4j.appender.file.MaxBackupIndex=14

# file uses PatternLayout.
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d [%t] %-5p %c{1} - %m%n

# Direct log messages to stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d [%t] %-5p %c{1} - %m%n

# Service category names are the name of the defining module class
# and then the service id.
log4j.logger.unidue.rc.ui.services.AppModule.TimingFilter=info

# Outputs a list of pages, components and mixins at startup.
log4j.logger.org.apache.tapestry5.services.TapestryModule.ComponentClassResolver=info

# Outputs startup statistics; elapsed time to setup and initialize the registry, a list of
# available services, and a launch banner that includes the Tapestry version number.
log4j.logger.org.apache.tapestry5.TapestryFilter=info


# Turning on debug mode for a page's or component's transformer logger
# will show all of the code changes that occur when the
# class is loaded.

# log4j.category.tapestry.transformer.unidue.rc.ui.pages.Index=debug

# Turning on debug mode for a component's events logger will show all the events triggered on the
# component, and which component methods are invoked as a result.

# log4j.category.tapestry.events.unidue.rc.ui.pages.Index=debug

# Turning on trace mode for a page's render logger provides extended information about every step
# in rendering (this is not generally helpful).  Turning on debug mode will add a one-line
# summary that includes the elapsed render time, which can be useful in tracking down
# performance issues.

# log4j.category.tapestry.render.unidue.rc.ui.pages.Index=debug

# Turn on some verbose debugging about everything in the application. This is nice initially,
# while getting everything set up.  You'll probably want to remove this once you are 
# up and running, replacing it with more selective debugging output.

# configure logging in reserve collections
log4j.logger.unidue.rc=debug

# configure logging of o/r mapper cayenne 

# set level to warn of CommonsJdbcEventLogger to see performed sql queries 
log4j.logger.org.apache.cayenne.log.CommonsJdbcEventLogger=error
log4j.logger.org.apache.cayenne.access=error